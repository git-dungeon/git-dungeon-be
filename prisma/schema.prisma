generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
  relationMode      = "foreignKeys"
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  emailVerified Boolean    @default(false)
  name          String?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts      Account[]
  sessions      Session[]
  state         DungeonState?
  logs          DungeonLog[]
  stateSnapshots DungeonStateSnapshot[]
}

model Account {
  id                    String   @id @default(uuid())
  providerId            String
  accountId             String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@index([expiresAt])
}

model RateLimit {
  key         String   @id
  count       Int      @default(0)
  lastRequest BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum DungeonAction {
  IDLE
  EXPLORING
  BATTLE
  REST
  TREASURE
  TRAP
}

model DungeonState {
  userId                  String         @id
  level                   Int            @default(1)
  exp                     Int            @default(0)
  hp                      Int            @default(10)
  maxHp                   Int            @default(10)
  atk                     Int            @default(1)
  def                     Int            @default(1)
  luck                    Int            @default(1)
  floor                   Int            @default(1)
  maxFloor                Int            @default(1)
  floorProgress           Int            @default(0)
  gold                    Int            @default(0)
  ap                      Int            @default(0)
  currentAction           DungeonAction  @default(IDLE)
  currentActionStartedAt  DateTime?
  createdAt               DateTime       @default(now())
  version                 Int            @default(1)
  updatedAt               DateTime       @updatedAt

  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([updatedAt])
  @@index([version])
}

enum DungeonLogCategory {
  EXPLORATION
  STATUS
}

enum DungeonLogAction {
  BATTLE
  DEFEAT
  MOVE
  REST
  TRAP
  TREASURE
  ACQUIRE_ITEM
  EQUIP_ITEM
  UNEQUIP_ITEM
  DISCARD_ITEM
  BUFF_APPLIED
  BUFF_EXPIRED
  LEVEL_UP
}

enum DungeonLogStatus {
  STARTED
  COMPLETED
}

model DungeonLog {
  id                  String              @id @default(uuid())
  userId              String
  category            DungeonLogCategory
  action              DungeonLogAction
  status              DungeonLogStatus    @default(STARTED)
  floor               Int?
  turnNumber          Int?
  stateVersionBefore  Int?
  stateVersionAfter   Int?
  delta               Json?
  extra               Json?
  createdAt           DateTime            @default(now())

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, createdAt])
  @@index([category, action])
  @@index([createdAt])
}

model DungeonStateSnapshot {
  id           String   @id @default(uuid())
  userId       String
  version      Int
  turnNumber   Int?
  createdAt    DateTime @default(now())
  statePayload Json
  reason       String?

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, version])
  @@index([userId, turnNumber])
  @@index([createdAt])
}
